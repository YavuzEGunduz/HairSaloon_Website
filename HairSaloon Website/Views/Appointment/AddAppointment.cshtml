@model HairSaloon_Website.Models.Appointment
@{
    ViewData["Title"] = "Yeni Randevu";
    var processes = ViewBag.Processes as List<HairSaloon_Website.Models.Process>;
    var employees = ViewBag.Employees as List<HairSaloon_Website.Models.Employee>;
}

<h2>Yeni Randevu Oluştur</h2>

<form asp-action="AddAppointment" method="post">
    <div class="form-group">
        <label asp-for="ProcessId">Hizmet Seç</label>
        <select asp-for="ProcessId" class="form-control" id="process-select">
            <option value="">Procces</option>
            @foreach (var process in processes)
            {
                <option value="@process.Id">@process.pName</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label asp-for="Date">Randevu Tarihi</label>
        <input asp-for="Date" class="form-control" type="datetime-local" id="appointmentDate" disabled />
    </div>

    <div class="form-group">
        <label asp-for="EmployeeId">Çalışan Seç</label>
        <select asp-for="EmployeeId" class="form-control" id="employee-select" disabled>
            <option value="">Employee</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary" id="submitButton" disabled>Oluştur</button>
</form>

<script>
    document.getElementById('process-select').addEventListener('change', function () {
        var processId = this.value;
        var appointmentDateElem = document.getElementById('appointmentDate');
        var employeeSelect = document.getElementById('employee-select');
        var submitButton = document.getElementById('submitButton');

        // Eğer bir process seçildiyse
        if (processId) {
            // Saat seçimini aktif hale getir
            appointmentDateElem.disabled = false;
            employeeSelect.disabled = true;
            submitButton.disabled = true;
        } else {
            appointmentDateElem.disabled = true;
            submitButton.disabled = true;
        }
    });

    document.getElementById('appointmentDate').addEventListener('change', function () {
        var appointmentDate = new Date(this.value);
        var processId = document.getElementById('process-select').value;
        var employeeSelect = document.getElementById('employee-select');
        var submitButton = document.getElementById('submitButton');

        if (appointmentDate && processId) {
            fetch(`/Appointment/GetAvailableEmployees?appointmentDate=${appointmentDate.toISOString()}&processId=${processId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Network response was not ok");
                    return response.json();
                })
                .then(data => {
                    employeeSelect.innerHTML = '<option value="">Employee</option>';

                    if (data.length > 0) {
                        data.forEach(employee => {
                            var option = document.createElement('option');
                            option.value = employee.id;
                            option.text = employee.name;
                            employeeSelect.appendChild(option);
                        });
                        employeeSelect.disabled = false;  // Çalışanlar aktif hale gelir
                        submitButton.disabled = false;
                    } else {
                        var option = document.createElement('option');
                        option.disabled = true;
                        option.text = "No Available Emplyee";
                        employeeSelect.appendChild(option);
                        submitButton.disabled = true;  // Formu devre dışı bırak
                    }
                })
                .catch(error => console.error("Error fetching available employees:", error));
        }
    });

    // Tarihi minimum bugünden başlat
    document.getElementById('appointmentDate').setAttribute('min', new Date().toISOString().slice(0, 16));
</script>
